from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import sqlite3, os
from subprocess import run
from dotenv import load_dotenv

load_dotenv("token.env")
TOKEN = os.getenv('TOKEN')
app = ApplicationBuilder().token(TOKEN).build()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1-–∫–æ–º–Ω.")],
            [KeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 2-–∫–æ–º–Ω.")],
            [KeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 3-–∫–æ–º–Ω.")],
            [KeyboardButton("üîÅ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
        ],
        resize_keyboard=True
    )

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ OLX üè†",
        reply_markup=keyboard
    )


async def avg_handler_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1 –∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    conn2 = sqlite3.connect("data/pokazateli.db")
    cursor2 = conn2.cursor()
    cursor2.execute("SELECT avg_price, avg_area, avg_price_per_m2, avg_30_35 FROM pokazateli ORDER BY id DESC LIMIT 1")
    row = cursor2.fetchone()
    conn2.close()

    if row:
        avg_price, avg_area, avg_price_per_m2, avg_30_35 = row
        await update.message.reply_text(
            f"üè∑ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price} $ –∑–∞ —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—â–∞–¥—å {avg_area} –º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –º¬≤: {avg_price_per_m2} $\n"
            f"üèò –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (30‚Äì35 –º¬≤): {avg_30_35} $"
        )
    else:
        await update.message.reply_text("‚õî –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")


async def avg_handler_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 2 –∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    conn2 = sqlite3.connect("data/pokazateli2.db")
    cursor2 = conn2.cursor()
    cursor2.execute("SELECT avg_price, avg_area, avg_price_per_m2, avg_46_55 FROM pokazateli2 ORDER BY id DESC LIMIT 1")
    row = cursor2.fetchone()
    conn2.close()
    if row:
        avg_price, avg_area, avg_price_per_m2, avg_46_55 = row
        await update.message.reply_text(
            f"üè∑ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price} $ –∑–∞ —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—â–∞–¥—å {avg_area} –º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –º¬≤: {avg_price_per_m2} $\n"
            f"üèò –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (46‚Äì55 –º¬≤): {avg_46_55} $"
        )
    else:
        await update.message.reply_text("‚õî –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")


async def avg_handler_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìä –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 3 –∫–æ–º–Ω–∞—Ç–Ω—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É")
    conn2 = sqlite3.connect("data/pokazateli3.db")
    cursor2 = conn2.cursor()
    cursor2.execute("SELECT avg_price, avg_area, avg_price_per_m2, avg_60_70 FROM pokazateli3 ORDER BY id DESC LIMIT 1")
    row = cursor2.fetchone()
    conn2.close()
    if row:
        avg_price, avg_area, avg_price_per_m2, avg_60_70 = row
        await update.message.reply_text(
            f"üè∑ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price} $ –∑–∞ —Å—Ä–µ–¥–Ω—é—é –ø–ª–æ—â–∞–¥—å {avg_area} –º¬≤\n"
            f"üí∞ –¶–µ–Ω–∞ –∑–∞ 1 –º¬≤: {avg_price_per_m2} $\n"
            f"üèò –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (60-70 –º¬≤): {avg_60_70} $"
        )
    else:
        await update.message.reply_text("‚õî –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")


async def update_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏...")

    errors = []

    try:
        run(["python", "parcing.py"], check=True)
    except Exception as e:
        errors.append("1-–∫–æ–º–Ω.: ‚ùå " + str(e))

    try:
        run(["python", "parcing_2.py"], check=True)
    except Exception as e:
        errors.append("2-–∫–æ–º–Ω.: ‚ùå " + str(e))

    try:
        run(["python", "parcing_3.py"], check=True)
    except Exception as e:
        errors.append("3-–∫–æ–º–Ω.: ‚ùå " + str(e))

    if errors:
        await update.message.reply_text("‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏:\n" + "\n".join(errors))
    else:
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")


app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 1-–∫–æ–º–Ω\.$"), avg_handler_1))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 2-–∫–æ–º–Ω\.$"), avg_handler_2))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 3-–∫–æ–º–Ω\.$"), avg_handler_3))
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üîÅ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ$"), update_handler))
app.run_polling()

